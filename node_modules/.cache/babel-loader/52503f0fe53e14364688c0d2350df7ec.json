{"ast":null,"code":"import _slicedToArray from \"/home/j/Projects/squizuForked/squizYou-QuizGenApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/j/Projects/squizuForked/squizYou-QuizGenApp/src/contexts/QuizContext.js\";\nimport React, { useState } from 'react';\nimport initialQuizes from '../data/quizes.json';\nimport { fetchQuiz, saveQuiz } from '../services/QuizService';\nexport const QuizContext = React.createContext();\nexport const QuizProvider = function (props) {\n  const _useState = useState(initialQuizes.quizes),\n        _useState2 = _slicedToArray(_useState, 2),\n        quizes = _useState2[0],\n        setQuizes = _useState2[1];\n\n  const fetchQuizToContext = () => {\n    const quizesRef = fetchQuiz(quiz => setQuizes(quiz));\n    quizesRef.off('value');\n  };\n\n  const addQuiz = newQuiz => {\n    setQuizes([...quizes, newQuiz]);\n  };\n\n  const selectQuiz = quizId => {\n    return quizes.find(quiz => quiz.id === quizId);\n  };\n\n  const selectQuizByUniqueId = uniqueId => {\n    return quizes.find(quiz => quiz.uniqueId === uniqueId);\n  };\n\n  const updateQuizToContext = updatedQuiz => {\n    const newQuizes = quizes.map(quiz => {\n      if (quiz.uniqueId === updatedQuiz.uniqueId) {\n        return updatedQuiz;\n      } else {\n        return quiz;\n      }\n    });\n    setQuizes(newQuizes);\n    saveQuiz(updatedQuiz);\n  };\n\n  return React.createElement(QuizContext.Provider, Object.assign({\n    value: {\n      quizes,\n      setQuizes,\n      selectQuiz,\n      addQuiz,\n      updateQuizToContext,\n      fetchQuizToContext,\n      selectQuizByUniqueId\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\nexport const QuizConsumer = QuizContext.Consumer;","map":{"version":3,"sources":["/home/j/Projects/squizuForked/squizYou-QuizGenApp/src/contexts/QuizContext.js"],"names":["React","useState","initialQuizes","fetchQuiz","saveQuiz","QuizContext","createContext","QuizProvider","props","quizes","setQuizes","fetchQuizToContext","quizesRef","quiz","off","addQuiz","newQuiz","selectQuiz","quizId","find","id","selectQuizByUniqueId","uniqueId","updateQuizToContext","updatedQuiz","newQuizes","map","QuizConsumer","Consumer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,yBAApC;AAEA,OAAO,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEP,OAAO,MAAMC,YAAY,GAAG,UAAUC,KAAV,EAAiB;AAAA,oBACbP,QAAQ,CAACC,aAAa,CAACO,MAAf,CADK;AAAA;AAAA,QAClCA,MADkC;AAAA,QAC1BC,SAD0B;;AAGzC,QAAMC,kBAAkB,GAAG,MAAM;AAC7B,UAAMC,SAAS,GAAGT,SAAS,CAACU,IAAI,IAAIH,SAAS,CAACG,IAAD,CAAlB,CAA3B;AACAD,IAAAA,SAAS,CAACE,GAAV,CAAc,OAAd;AACH,GAHD;;AAKA,QAAMC,OAAO,GAAGC,OAAO,IAAI;AACvBN,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYO,OAAZ,CAAD,CAAT;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAIC,MAAD,IAAY;AAC3B,WAAOT,MAAM,CAACU,IAAP,CAAYN,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYF,MAAhC,CAAP;AACH,GAFD;;AAIA,QAAMG,oBAAoB,GAAIC,QAAD,IAAc;AACvC,WAAOb,MAAM,CAACU,IAAP,CAAYN,IAAI,IAAIA,IAAI,CAACS,QAAL,KAAkBA,QAAtC,CAAP;AACH,GAFD;;AAIA,QAAMC,mBAAmB,GAAIC,WAAD,IAAiB;AACzC,UAAMC,SAAS,GAAGhB,MAAM,CAACiB,GAAP,CAAWb,IAAI,IAAI;AACjC,UAAIA,IAAI,CAACS,QAAL,KAAkBE,WAAW,CAACF,QAAlC,EAA4C;AACxC,eAAOE,WAAP;AACH,OAFD,MAEO;AACH,eAAOX,IAAP;AACH;AACJ,KANiB,CAAlB;AAQAH,IAAAA,SAAS,CAACe,SAAD,CAAT;AACArB,IAAAA,QAAQ,CAACoB,WAAD,CAAR;AAEH,GAZD;;AAcA,SAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAChCf,MAAAA,MADgC;AAEhCC,MAAAA,SAFgC;AAGhCO,MAAAA,UAHgC;AAIhCF,MAAAA,OAJgC;AAKhCQ,MAAAA,mBALgC;AAMhCZ,MAAAA,kBANgC;AAOhCU,MAAAA;AAPgC;AAA7B,KAQAb,KARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AASH,CA3CM;AA6CP,OAAO,MAAMmB,YAAY,GAAGtB,WAAW,CAACuB,QAAjC","sourcesContent":["import React, { useState } from 'react'\nimport initialQuizes from '../data/quizes.json'\nimport { fetchQuiz, saveQuiz } from '../services/QuizService'\n\nexport const QuizContext = React.createContext()\n\nexport const QuizProvider = function (props) {\n    const [quizes, setQuizes] = useState(initialQuizes.quizes)\n\n    const fetchQuizToContext = () => {\n        const quizesRef = fetchQuiz(quiz => setQuizes(quiz))\n        quizesRef.off('value')\n    }\n\n    const addQuiz = newQuiz => {\n        setQuizes([...quizes, newQuiz])\n    }\n\n    const selectQuiz = (quizId) => {\n        return quizes.find(quiz => quiz.id === quizId)\n    }\n\n    const selectQuizByUniqueId = (uniqueId) => {\n        return quizes.find(quiz => quiz.uniqueId === uniqueId)\n    }\n\n    const updateQuizToContext = (updatedQuiz) => {\n        const newQuizes = quizes.map(quiz => {\n            if (quiz.uniqueId === updatedQuiz.uniqueId) {\n                return updatedQuiz\n            } else {\n                return quiz\n            }\n        })\n\n        setQuizes(newQuizes)\n        saveQuiz(updatedQuiz)\n\n    }\n\n    return <QuizContext.Provider value={{\n        quizes,\n        setQuizes,\n        selectQuiz,\n        addQuiz,\n        updateQuizToContext,\n        fetchQuizToContext,\n        selectQuizByUniqueId\n    }} {...props} />\n}\n\nexport const QuizConsumer = QuizContext.Consumer"]},"metadata":{},"sourceType":"module"}