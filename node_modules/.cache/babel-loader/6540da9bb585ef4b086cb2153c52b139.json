{"ast":null,"code":"import _objectSpread from \"/home/j/Projects/squizuForked/jfdd12-ubuntuwnicy-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/j/Projects/squizuForked/jfdd12-ubuntuwnicy-app/src/components/Quiz/Quiz.js\";\nimport React from \"react\";\nimport styles from \"./QuizTitle.module.css\";\nimport { stringLiteral } from \"@babel/types\";\nimport { QuestionsButtons } from \"./QuestionsButtons\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport AddAnswerButton from \"../quizGenerator/AddAnswerButton\";\nimport { fetchQuiz } from \"../../services/QuizService\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst Answer = ({\n  answer,\n  isClicked,\n  onClick\n}) => React.createElement(\"li\", {\n  className: styles.possibleAnswer,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  className: \"\".concat(styles.button, \" \").concat(isClicked ? styles.button : \"\"),\n  style: {\n    backgroundColor: \"\".concat(isClicked ? \"#9ad16b\" : \"white\")\n  },\n  onClick: () => {\n    onClick(answer.id);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, answer.answer));\n\nconst Spinner = () => React.createElement(Dimmer, {\n  active: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, React.createElement(Loader, {\n  size: \"massive\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, \"Prosz\\u0119 czeka\\u0107...\"));\n\nexport default class Quiz extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentQuestionId: 0,\n      answers: {},\n      questions: {},\n      areQuestionsLoading: true,\n      isQuizComplete: false,\n      quizes: [],\n      quizId: this.props.match.params.id\n    };\n\n    this.handleAnswerClick = (answerId, questionId) => {\n      const _this$state = this.state,\n            answers = _this$state.answers,\n            currentQuestionId = _this$state.currentQuestionId;\n      const previousAnswers = this.state.answers[questionId] ? [...this.state.answers[questionId]] : [];\n      this.setState({\n        answers: _objectSpread({}, answers, {\n          [currentQuestionId]: [...new Set([...previousAnswers, answerId])]\n        })\n      });\n\n      if (answers[questionId] !== {} && answers[questionId] !== undefined) {\n        if (answers[questionId].includes(answerId)) {\n          const newCorrectAnswers = answers[questionId].filter(answer => answer !== answerId);\n          this.setState({\n            answers: _objectSpread({}, answers, {\n              [currentQuestionId]: [...newCorrectAnswers]\n            })\n          });\n        }\n      }\n    };\n\n    this.handleQuestionChangeClick = questionId => {\n      this.setState({\n        currentQuestionId: questionId\n      });\n    };\n\n    this.handleQuizCompleteClick = () => {\n      const _this$state2 = this.state,\n            answers = _this$state2.answers,\n            questions = _this$state2.questions;\n      const checkForAnswers = Object.values(answers).find(answer => answer.length === 0);\n\n      if (checkForAnswers === undefined && Object.keys(answers).length === questions.questions.length) {\n        if (window.confirm(\"Czy na pewno chcesz zakończyć quiz?\")) {\n          this.setState({\n            isQuizComplete: true\n          });\n        }\n      } else {\n        alert(\"Odpowiedz najpierw na wszystkie pytania!\");\n      }\n    };\n\n    this.handleQuizStartClick = () => {\n      this.setState({\n        currentQuestionId: 0,\n        answers: {},\n        isQuizComplete: false\n      });\n    };\n  }\n\n  getQuizResult() {\n    const _this$state3 = this.state,\n          questions = _this$state3.questions,\n          answers = _this$state3.answers;\n    const score = questions.questions.reduce((accu, question) => {\n      return question.correctAnswers.every(answer => answers[question.id - 1].includes(\"\".concat(answer)) && question.correctAnswers.length === answers[question.id - 1].length) ? accu + 1 : accu;\n    }, 0);\n    return score / questions.questions.length;\n  }\n\n  componentDidMount() {\n    this.setState({\n      areQuestionsLoading: true\n    }, () => fetchQuiz(quizes => {\n      this.setState({\n        quizes,\n        areQuestionsLoading: false,\n        questions: quizes.find(quiz => quizes.indexOf(quiz) == this.props.match.params.id)\n      });\n    }));\n  }\n\n  isSelectedAnswer(questionId, currentAnswerId) {\n    const _this$state4 = this.state,\n          answers = _this$state4.answers,\n          currentQuestionId = _this$state4.currentQuestionId;\n\n    if (answers[questionId] !== {} && answers[questionId] !== undefined) {\n      if (answers[questionId].includes(currentAnswerId)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  renderQuestion(question, questionId, quizId) {\n    let questionsIndexZero = this.state.questions.questions[questionId];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: styles.quizTitleName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.state.quizes[quizId].title), React.createElement(\"div\", {\n      className: styles.answerWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: styles.quizName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, questionsIndexZero.question), React.createElement(\"ul\", {\n      className: styles.answerList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, questionsIndexZero.answers.map(answer => React.createElement(Answer, {\n      key: answer.id,\n      answer: answer,\n      className: styles.answer,\n      isClicked: this.isSelectedAnswer(questionId, answer.id),\n      onClick: () => this.handleAnswerClick(answer.id, questionId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })))));\n  }\n\n  renderQuestionsButtons() {\n    const _this$state5 = this.state,\n          currentQuestionId = _this$state5.currentQuestionId,\n          questions = _this$state5.questions,\n          quizes = _this$state5.quizes;\n    return React.createElement(QuestionsButtons, {\n      onQuestionChangeHandler: this.handleQuestionChangeClick,\n      currentQuestionId: currentQuestionId,\n      totalNumberOfQuestion: questions.questions.length,\n      questions: questions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    });\n  }\n\n  renderFinishQuizButton() {\n    return React.createElement(\"div\", {\n      className: styles.finishQuizWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: styles.finishQuiz,\n      onClick: this.handleQuizCompleteClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"ZAKO\\u0143CZ QUIZ\"));\n  }\n\n  renderStartQuizButton() {\n    return React.createElement(\"div\", {\n      className: styles.startNewQuizWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/quizlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: styles.startNewQuiz,\n      onClick: this.handleQuizStartClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Przejd\\u017A do listy dost\\u0119pnych quiz\\xF3w\")));\n  }\n\n  renderQuizComplete() {\n    const _this$state6 = this.state,\n          quizes = _this$state6.quizes,\n          quizId = _this$state6.quizId;\n    const lastResult = localStorage.getItem(\"Wyniki z Quizu: \".concat(quizes[quizId].title));\n    const result = Math.floor(this.getQuizResult() * 100);\n    localStorage.setItem(\"Wyniki z Quizu: \".concat(quizes[quizId].title), JSON.stringify(result));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: styles.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Tw\\xF3j wynik: \", result, \"%\"), React.createElement(\"p\", {\n      className: styles.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Tw\\xF3j ostatni wynik: \", lastResult, \"%\"), this.renderStartQuizButton());\n  }\n\n  render() {\n    const _this$state7 = this.state,\n          areQuestionsLoading = _this$state7.areQuestionsLoading,\n          currentQuestionId = _this$state7.currentQuestionId,\n          quizId = _this$state7.quizId,\n          questions = _this$state7.questions,\n          isQuizComplete = _this$state7.isQuizComplete;\n\n    if (isQuizComplete) {\n      return this.renderQuizComplete();\n    }\n\n    if (!questions || areQuestionsLoading) {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      });\n    }\n\n    const currentQuestion = questions[currentQuestionId];\n    return React.createElement(\"div\", {\n      className: styles.quizTitles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.questionCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, this.renderQuestion(currentQuestion, currentQuestionId, quizId), this.renderQuestionsButtons(questions), this.renderFinishQuizButton()));\n  }\n\n}","map":{"version":3,"sources":["/home/j/Projects/squizuForked/jfdd12-ubuntuwnicy-app/src/components/Quiz/Quiz.js"],"names":["React","styles","stringLiteral","QuestionsButtons","BrowserRouter","Router","Route","Link","AddAnswerButton","fetchQuiz","Dimmer","Loader","Answer","answer","isClicked","onClick","possibleAnswer","button","backgroundColor","id","Spinner","Quiz","Component","state","currentQuestionId","answers","questions","areQuestionsLoading","isQuizComplete","quizes","quizId","props","match","params","handleAnswerClick","answerId","questionId","previousAnswers","setState","Set","undefined","includes","newCorrectAnswers","filter","handleQuestionChangeClick","handleQuizCompleteClick","checkForAnswers","Object","values","find","length","keys","window","confirm","alert","handleQuizStartClick","getQuizResult","score","reduce","accu","question","correctAnswers","every","componentDidMount","quiz","indexOf","isSelectedAnswer","currentAnswerId","renderQuestion","questionsIndexZero","quizTitleName","title","answerWrapper","quizName","answerList","map","renderQuestionsButtons","renderFinishQuizButton","finishQuizWrap","finishQuiz","renderStartQuizButton","startNewQuizWrap","startNewQuiz","renderQuizComplete","lastResult","localStorage","getItem","result","Math","floor","setItem","JSON","stringify","render","currentQuestion","quizTitles","questionCard"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styles from \"./QuizTitle.module.css\";\nimport { stringLiteral } from \"@babel/types\";\nimport { QuestionsButtons } from \"./QuestionsButtons\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport AddAnswerButton from \"../quizGenerator/AddAnswerButton\";\nimport { fetchQuiz } from \"../../services/QuizService\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst Answer = ({ answer, isClicked, onClick }) => (\n  <li className={styles.possibleAnswer}>\n    <button\n      className={`${styles.button} ${isClicked ? styles.button : \"\"}`}\n      style={{\n        backgroundColor: `${isClicked ? \"#9ad16b\" : \"white\"}`\n      }}\n      onClick={() => {\n        onClick(answer.id);\n      }}\n    >\n      {answer.answer}\n    </button>\n  </li>\n);\n\nconst Spinner = () => (\n  <Dimmer active>\n    <Loader size=\"massive\">Proszę czekać...</Loader>\n  </Dimmer>\n);\n\nexport default class Quiz extends React.Component {\n  state = {\n    currentQuestionId: 0,\n    answers: {},\n    questions: {},\n    areQuestionsLoading: true,\n    isQuizComplete: false,\n    quizes: [],\n    quizId: this.props.match.params.id\n  };\n\n  getQuizResult() {\n    const { questions, answers } = this.state;\n    const score = questions.questions.reduce((accu, question) => {\n      return question.correctAnswers.every(\n        answer =>\n          answers[question.id - 1].includes(`${answer}`) &&\n          question.correctAnswers.length === answers[question.id - 1].length\n      )\n        ? accu + 1\n        : accu;\n    }, 0);\n    return score / questions.questions.length;\n  }\n\n  componentDidMount() {\n    this.setState(\n      {\n        areQuestionsLoading: true\n      },\n      () =>\n        fetchQuiz(quizes => {\n          this.setState({\n            quizes,\n            areQuestionsLoading: false,\n            questions: quizes.find(\n              quiz => quizes.indexOf(quiz) == this.props.match.params.id\n            )\n          });\n        })\n    );\n  }\n\n  handleAnswerClick = (answerId, questionId) => {\n    const { answers, currentQuestionId } = this.state;\n\n    const previousAnswers = this.state.answers[questionId]\n      ? [...this.state.answers[questionId]]\n      : [];\n\n    this.setState({\n      answers: {\n        ...answers,\n        [currentQuestionId]: [...new Set([...previousAnswers, answerId])]\n      }\n    });\n\n    if (answers[questionId] !== {} && answers[questionId] !== undefined) {\n      if (answers[questionId].includes(answerId)) {\n        const newCorrectAnswers = answers[questionId].filter(\n          answer => answer !== answerId\n        );\n        this.setState({\n          answers: {\n            ...answers,\n            [currentQuestionId]: [...newCorrectAnswers]\n          }\n        });\n      }\n    }\n  };\n\n  handleQuestionChangeClick = questionId => {\n    this.setState({ currentQuestionId: questionId });\n  };\n\n  handleQuizCompleteClick = () => {\n    const { answers, questions } = this.state;\n    const checkForAnswers = Object.values(answers).find(\n      answer => answer.length === 0\n    );\n\n    if (\n      checkForAnswers === undefined &&\n      Object.keys(answers).length === questions.questions.length\n    ) {\n      if (window.confirm(\"Czy na pewno chcesz zakończyć quiz?\")) {\n        this.setState({ isQuizComplete: true });\n      }\n    } else {\n      alert(\"Odpowiedz najpierw na wszystkie pytania!\");\n    }\n  };\n\n  handleQuizStartClick = () => {\n    this.setState({\n      currentQuestionId: 0,\n      answers: {},\n      isQuizComplete: false\n    });\n  };\n\n  isSelectedAnswer(questionId, currentAnswerId) {\n    const { answers, currentQuestionId } = this.state;\n\n    if (answers[questionId] !== {} && answers[questionId] !== undefined) {\n      if (answers[questionId].includes(currentAnswerId)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  renderQuestion(question, questionId, quizId) {\n    let questionsIndexZero = this.state.questions.questions[questionId];\n    return (\n      <div>\n        <h1 className={styles.quizTitleName}>\n          {this.state.quizes[quizId].title}\n        </h1>\n        <div className={styles.answerWrapper}>\n          <h1 className={styles.quizName}>{questionsIndexZero.question}</h1>\n          <ul className={styles.answerList}>\n            {questionsIndexZero.answers.map(answer => (\n              <Answer\n                key={answer.id}\n                answer={answer}\n                className={styles.answer}\n                isClicked={this.isSelectedAnswer(questionId, answer.id)}\n                onClick={() => this.handleAnswerClick(answer.id, questionId)}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  renderQuestionsButtons() {\n    const { currentQuestionId, questions, quizes } = this.state;\n\n    return (\n      <QuestionsButtons\n        onQuestionChangeHandler={this.handleQuestionChangeClick}\n        currentQuestionId={currentQuestionId}\n        totalNumberOfQuestion={questions.questions.length}\n        questions={questions}\n      />\n    );\n  }\n\n  renderFinishQuizButton() {\n    return (\n      <div className={styles.finishQuizWrap}>\n        <button\n          className={styles.finishQuiz}\n          onClick={this.handleQuizCompleteClick}\n        >\n          ZAKOŃCZ QUIZ\n        </button>\n      </div>\n    );\n  }\n\n  renderStartQuizButton() {\n    return (\n      <div className={styles.startNewQuizWrap}>\n        <Link to={\"/quizlist\"}>\n          <button\n            className={styles.startNewQuiz}\n            onClick={this.handleQuizStartClick}\n          >\n            Przejdź do listy dostępnych quizów\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  renderQuizComplete() {\n    const { quizes, quizId } = this.state;\n    const lastResult = localStorage.getItem(\n      `Wyniki z Quizu: ${quizes[quizId].title}`\n    );\n    const result = Math.floor(this.getQuizResult() * 100);\n    localStorage.setItem(\n      `Wyniki z Quizu: ${quizes[quizId].title}`,\n      JSON.stringify(result)\n    );\n\n    return (\n      <div>\n        <p className={styles.score}>Twój wynik: {result}%</p>\n        <p className={styles.score}>Twój ostatni wynik: {lastResult}%</p>\n        {this.renderStartQuizButton()}\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      areQuestionsLoading,\n      currentQuestionId,\n      quizId,\n      questions,\n      isQuizComplete\n    } = this.state;\n\n    if (isQuizComplete) {\n      return this.renderQuizComplete();\n    }\n\n    if (!questions || areQuestionsLoading) {\n      return <Spinner />;\n    }\n\n    const currentQuestion = questions[currentQuestionId];\n\n    return (\n      <div className={styles.quizTitles}>\n        <div className={styles.questionCard}>\n          {this.renderQuestion(currentQuestion, currentQuestionId, quizId)}\n          {this.renderQuestionsButtons(questions)}\n          {this.renderFinishQuizButton()}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}