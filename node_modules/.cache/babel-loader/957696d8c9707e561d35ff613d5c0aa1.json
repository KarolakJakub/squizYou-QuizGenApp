{"ast":null,"code":"import _objectSpread from \"/home/j/Projects/squizuForked/jfdd12-ubuntuwnicy-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/j/Projects/squizuForked/jfdd12-ubuntuwnicy-app/src/components/quizGenerator/QuizGenWrapper.js\";\nimport React from \"react\";\nimport \"./QuizGenWrapperStyles.css\";\nimport AnswersList from \"./AnswersList\";\nimport QuestionInput from \"./QuestionInput\";\nimport { QuizContext } from \"../../contexts/QuizContext\";\nimport QuizTitleInput from \"./QuizTitleInput\";\nimport RemoveQuestionButton from \"./RemoveQuestionButton\";\nimport AddQuestionButton from \"./AddQuestionButton\";\nimport AddAnswerButton from \"./AddAnswerButton\";\nimport { Dimmer, Loader, Button } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { fetchQuiz, saveQuiz } from '../../services/QuizService';\nimport { BrowserRouter as Route, withRouter, Prompt } from \"react-router-dom\";\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { Container } from \"semantic-ui-react\";\n\nconst selectQuizByUniqueId = (quizes, uniqueId) => {\n  return quizes.find(quiz => quiz.uniqueId === uniqueId);\n};\n\nclass QuizGenWrapper extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: '',\n      quiz: [],\n      quizes: [],\n      isLoading: true,\n      isSaved: true\n    };\n\n    this.scrollToBottom = () => {\n      this.element && this.element.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.handleTitleChange = newTitle => {\n      newTitle.preventDefault();\n      const newState = {\n        title: newTitle.target.value,\n        isSaved: false\n      };\n      this.setState(newState);\n    };\n\n    this.handleQuestionChange = (questionId, newQuestion) => {\n      const newQuestions = this.state.quiz.questions.map(questionObject => {\n        if (questionObject.id === questionId) {\n          return _objectSpread({}, questionObject, {\n            question: newQuestion\n          });\n        } else {\n          return questionObject;\n        }\n      });\n      this.setState({\n        quiz: _objectSpread({}, this.state.quiz, {\n          questions: newQuestions\n        }),\n        isSaved: false\n      });\n    };\n\n    this.handleAnswerChange = (event, questionId) => {\n      const answerId = event.target.name;\n      const answerInput = event.target.value;\n      const newQuestions = this.state.quiz.questions.map(question => {\n        if (question.id === questionId) {\n          question.answers.map(answer => {\n            if (answer.id === answerId) {\n              answer.answer = answerInput;\n              return answer;\n            } else {\n              return answer;\n            }\n          });\n          return question;\n        } else {\n          return question;\n        }\n      });\n      this.setState({\n        quiz: _objectSpread({}, this.state.quiz, {\n          questions: newQuestions\n        }),\n        isSaved: false\n      });\n    };\n\n    this.handleSaveQuiz = () => {\n      const newQuizes = this.state.quizes.map(quiz => {\n        if (quiz.uniqueId === this.state.quiz.uniqueId) {\n          return this.state.quiz;\n        } else {\n          return quiz;\n        }\n      });\n      this.setState({\n        quizes: newQuizes\n      }, () => saveQuiz(this.state.quiz));\n      alert(\"Twój Quiz został zapisany\");\n    };\n\n    this.handleAddQuestion = () => {\n      const newQuestionCard = {\n        id: \"\".concat(this.state.quiz.questions.length + 1),\n        question: \"\",\n        answers: [{\n          id: \"1\",\n          answer: \"\",\n          correct: true\n        }, {\n          id: \"2\",\n          answer: \"\",\n          correct: false\n        }]\n      };\n      const newQuestions = [...this.state.quiz.questions, newQuestionCard];\n      this.setState({\n        quiz: _objectSpread({}, this.state.quiz, {\n          questions: newQuestions\n        }),\n        isSaved: false\n      });\n    };\n\n    this.handleRemoveQuestion = questionId => {\n      if (this.state.quiz.questions.length > 1) {\n        const newQuestions = this.state.quiz.questions.filter(question => question.id !== questionId);\n        let questionIndex = 0;\n        newQuestions.map(question => {\n          questionIndex = questionIndex + 1;\n          return question.id = \"\".concat(questionIndex);\n        });\n        this.setState({\n          quiz: _objectSpread({}, this.state.quiz, {\n            questions: newQuestions\n          }),\n          isSaved: false\n        });\n      }\n    };\n\n    this.handleAddAnswer = questionId => {\n      const newQuestions = this.state.quiz.questions.map(question => {\n        if (question.id === questionId && question.answers.length < 6) {\n          const newAnswer = {\n            id: \"\".concat(question.answers.length + 1),\n            answer: \"\",\n            correct: false\n          };\n          question.answers.push(newAnswer);\n          return question;\n        } else {\n          return question;\n        }\n      });\n      this.setState({\n        quiz: _objectSpread({}, this.state.quiz, {\n          questions: newQuestions\n        }),\n        isSaved: false\n      });\n    };\n\n    this.handleRemoveAnswer = (event, questionId) => {\n      const answerId = event.target.name;\n      let checkMinCorrectAnswers = this.checkCorrectAnswers(questionId);\n      const newQuestions = this.state.quiz.questions.map(question => {\n        if (question.id === questionId && question.answers.length > 2) {\n          const newAnswers = question.answers.filter(answer => {\n            if (checkMinCorrectAnswers <= 1 && answer.correct === true) {\n              return answer;\n            }\n\n            return answer.id !== answerId;\n          });\n          let answerIndex = 0;\n          newAnswers.map(answer => {\n            answerIndex = answerIndex + 1;\n            answer.id = \"\".concat(answerIndex);\n            return answer;\n          });\n          question.answers = newAnswers;\n          return question;\n        } else {\n          return question;\n        }\n      });\n      this.setState({\n        quiz: _objectSpread({}, this.state.quiz, {\n          questions: newQuestions\n        }),\n        isSaved: false\n      });\n    };\n\n    this.handleCheckboxChange = (questionId, event) => {\n      const answerId = event.target.name;\n      let checkMinCorrectAnswers = this.checkCorrectAnswers(questionId);\n      const newQuestions = this.state.quiz.questions.map(question => {\n        if (question.id === questionId) {\n          question.answers.map(answer => {\n            if (answer.id === answerId) {\n              if (checkMinCorrectAnswers <= 1 && answer.correct === true) {\n                return answer;\n              } else {\n                answer.correct = !answer.correct;\n              }\n\n              return answer;\n            } else {\n              return answer;\n            }\n          });\n          return question;\n        } else {\n          return question;\n        }\n      });\n      this.setState({\n        quiz: _objectSpread({}, this.state.quiz, {\n          questions: newQuestions\n        }),\n        isSaved: false\n      });\n    };\n\n    this.checkCorrectAnswers = questionId => {\n      return this.state.quiz.questions[questionId - 1].answers.filter(answer => answer.correct === true).length;\n    };\n\n    this.setRefForLastElement = (el, index, questionsCount) => {\n      if (questionsCount === index) {\n        this.element = el;\n      }\n    };\n\n    this.renderQuestions = () => {\n      const questions = this.state.quiz.questions;\n      const questionsCount = questions.length - 1;\n      return questions.map((question, index) => React.createElement(\"div\", {\n        key: question.id,\n        className: \"quizGenInputs\",\n        ref: el => this.setRefForLastElement(el, index, questionsCount),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(RemoveQuestionButton, {\n        onClick: event => this.handleRemoveQuestion(question.id, event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), React.createElement(QuestionInput, {\n        question: question,\n        onChange: this.handleQuestionChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }), React.createElement(AnswersList, {\n        question: question,\n        questionId: index,\n        onClickRemoveAnswer: event => this.handleRemoveAnswer(event, question.id),\n        onClickCheckboxChange: event => this.handleCheckboxChange(question.id, event),\n        onAnswerChange: event => this.handleAnswerChange(event, question.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }), React.createElement(AddAnswerButton, {\n        onClick: () => this.handleAddAnswer(question.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      })));\n    };\n  }\n\n  fetchAndUpdate() {\n    const uniqueId = this.props.match.params.id;\n    this.setState({\n      isLoading: true\n    });\n    fetchQuiz(quizes => {\n      this.setState({\n        quiz: selectQuizByUniqueId(quizes, uniqueId),\n        // quizes: quizes,\n        isLoading: false,\n        isSaved: true\n      });\n      this.setState({\n        title: this.state.quiz.title\n      });\n    });\n  }\n\n  componentDidMount() {\n    return this.fetchAndUpdate();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoading === false && prevState.quiz.questions !== undefined) {\n      if (this.state.quiz.questions.length - 1 === prevState.quiz.questions.length) {\n        this.scrollToBottom();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.state.isLoading ? React.createElement(Dimmer, {\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      size: \"massive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"Prosz\\u0119 czeka\\u0107...\")) : React.createElement(React.Fragment, null, React.createElement(Prompt, {\n      when: !this.state.isSaved,\n      message: \"Quiz nie zosta\\u0142 zapisany. Czy na pewno chcesz wyj\\u015B\\u0107?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quizGenWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"quizGenHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"STW\\xD3RZ QUIZ\"), React.createElement(QuizTitleInput, {\n      quizTitle: this.state.title,\n      onChange: this.handleTitleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), this.renderQuestions(), React.createElement(\"div\", {\n      className: \"saveAndAddButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(AddQuestionButton, {\n      onClick: this.handleAddQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleSaveQuiz,\n      className: \"saveQuizButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"ZAPISZ QUIZ\"), React.createElement(ScrollUpButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withRouter(QuizGenWrapper);","map":{"version":3,"sources":["/home/j/Projects/squizuForked/jfdd12-ubuntuwnicy-app/src/components/quizGenerator/QuizGenWrapper.js"],"names":["React","AnswersList","QuestionInput","QuizContext","QuizTitleInput","RemoveQuestionButton","AddQuestionButton","AddAnswerButton","Dimmer","Loader","Button","fetchQuiz","saveQuiz","BrowserRouter","Route","withRouter","Prompt","ScrollUpButton","Container","selectQuizByUniqueId","quizes","uniqueId","find","quiz","QuizGenWrapper","PureComponent","state","title","isLoading","isSaved","scrollToBottom","element","scrollIntoView","behavior","handleTitleChange","newTitle","preventDefault","newState","target","value","setState","handleQuestionChange","questionId","newQuestion","newQuestions","questions","map","questionObject","id","question","handleAnswerChange","event","answerId","name","answerInput","answers","answer","handleSaveQuiz","newQuizes","alert","handleAddQuestion","newQuestionCard","length","correct","handleRemoveQuestion","filter","questionIndex","handleAddAnswer","newAnswer","push","handleRemoveAnswer","checkMinCorrectAnswers","checkCorrectAnswers","newAnswers","answerIndex","handleCheckboxChange","setRefForLastElement","el","index","questionsCount","renderQuestions","fetchAndUpdate","props","match","params","componentDidMount","componentDidUpdate","prevProps","prevState","undefined","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./QuizGenWrapperStyles.css\";\nimport AnswersList from \"./AnswersList\";\nimport QuestionInput from \"./QuestionInput\";\nimport { QuizContext } from \"../../contexts/QuizContext\";\nimport QuizTitleInput from \"./QuizTitleInput\";\nimport RemoveQuestionButton from \"./RemoveQuestionButton\";\nimport AddQuestionButton from \"./AddQuestionButton\";\nimport AddAnswerButton from \"./AddAnswerButton\";\nimport { Dimmer, Loader, Button } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { fetchQuiz, saveQuiz } from '../../services/QuizService'\nimport { BrowserRouter as Route, withRouter, Prompt } from \"react-router-dom\";\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { Container } from \"semantic-ui-react\";\n\nconst selectQuizByUniqueId = (quizes, uniqueId) => {\n  return quizes.find(quiz => quiz.uniqueId === uniqueId)\n}\n\nclass QuizGenWrapper extends React.PureComponent {\n\n  state = {\n    title: '',\n    quiz: [],\n    quizes: [],\n    isLoading: true,\n    isSaved: true\n  };\n\n  fetchAndUpdate() {\n\n    const uniqueId = this.props.match.params.id\n    this.setState({ isLoading: true })\n    fetchQuiz((quizes) => {\n\n      this.setState({\n        quiz: selectQuizByUniqueId(quizes, uniqueId),\n        // quizes: quizes,\n        isLoading: false,\n        isSaved: true,\n      })\n\n      this.setState({\n        title: this.state.quiz.title\n      })\n\n    }\n    )\n  }\n\n\n\n  componentDidMount() {\n\n    return this.fetchAndUpdate()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.isLoading === false &&\n      prevState.quiz.questions !== undefined\n    ) {\n      if (\n        this.state.quiz.questions.length - 1 ===\n        prevState.quiz.questions.length\n      ) {\n        this.scrollToBottom();\n      }\n    }\n  }\n\n  scrollToBottom = () => {\n    this.element && this.element.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  handleTitleChange = newTitle => {\n\n    newTitle.preventDefault()\n\n\n    const newState = {\n      title: newTitle.target.value,\n      isSaved: false\n    }\n\n    this.setState(newState);\n\n  };\n\n  handleQuestionChange = (questionId, newQuestion) => {\n    const newQuestions = this.state.quiz.questions.map(questionObject => {\n      if (questionObject.id === questionId) {\n        return {\n          ...questionObject,\n          question: newQuestion\n        };\n      } else {\n        return questionObject;\n      }\n    });\n    this.setState({\n      quiz: {\n        ...this.state.quiz,\n        questions: newQuestions\n      }, isSaved: false\n    });\n  };\n\n  handleAnswerChange = (event, questionId) => {\n    const answerId = event.target.name;\n    const answerInput = event.target.value;\n\n    const newQuestions = this.state.quiz.questions.map(question => {\n      if (question.id === questionId) {\n        question.answers.map(answer => {\n          if (answer.id === answerId) {\n            answer.answer = answerInput;\n            return answer;\n          } else {\n            return answer;\n          }\n        });\n        return question;\n      } else {\n        return question;\n      }\n    });\n\n    this.setState({\n      quiz: {\n        ...this.state.quiz,\n        questions: newQuestions\n      }, isSaved: false\n    });\n  };\n\n  handleSaveQuiz = () => {\n\n\n    const newQuizes = this.state.quizes.map(quiz => {\n      if (quiz.uniqueId === this.state.quiz.uniqueId) {\n        return this.state.quiz\n      } else {\n        return quiz\n      }\n    })\n    this.setState({\n      quizes: newQuizes,\n    },\n      () => saveQuiz(this.state.quiz))\n    alert(\"Twój Quiz został zapisany\")\n  };\n\n  handleAddQuestion = () => {\n    const newQuestionCard = {\n      id: `${this.state.quiz.questions.length + 1}`,\n      question: \"\",\n      answers: [\n        {\n          id: \"1\",\n          answer: \"\",\n          correct: true\n        },\n        {\n          id: \"2\",\n          answer: \"\",\n          correct: false\n        }\n      ]\n    };\n    const newQuestions = [...this.state.quiz.questions, newQuestionCard];\n    this.setState({\n      quiz: {\n        ...this.state.quiz,\n        questions: newQuestions\n      }, isSaved: false\n    });\n  };\n\n  handleRemoveQuestion = questionId => {\n    if (this.state.quiz.questions.length > 1) {\n      const newQuestions = this.state.quiz.questions.filter(\n        question => question.id !== questionId\n      );\n\n      let questionIndex = 0;\n\n      newQuestions.map(question => {\n        questionIndex = questionIndex + 1;\n        return (question.id = `${questionIndex}`);\n      });\n      this.setState({\n        quiz: {\n          ...this.state.quiz,\n          questions: newQuestions\n        }, isSaved: false\n      });\n    }\n  };\n\n  handleAddAnswer = questionId => {\n    const newQuestions = this.state.quiz.questions.map(question => {\n      if (question.id === questionId && question.answers.length < 6) {\n        const newAnswer = {\n          id: `${question.answers.length + 1}`,\n          answer: \"\",\n          correct: false\n        };\n        question.answers.push(newAnswer);\n        return question;\n      } else {\n        return question;\n      }\n    });\n\n    this.setState({\n      quiz: {\n        ...this.state.quiz,\n        questions: newQuestions\n      }, isSaved: false\n    });\n  };\n\n  handleRemoveAnswer = (event, questionId) => {\n    const answerId = event.target.name;\n\n    let checkMinCorrectAnswers = this.checkCorrectAnswers(questionId);\n\n    const newQuestions = this.state.quiz.questions.map(question => {\n      if (question.id === questionId && question.answers.length > 2) {\n        const newAnswers = question.answers.filter(answer => {\n          if (checkMinCorrectAnswers <= 1 && answer.correct === true) {\n            return answer;\n          }\n          return answer.id !== answerId;\n        });\n\n        let answerIndex = 0;\n\n        newAnswers.map(answer => {\n          answerIndex = answerIndex + 1;\n          answer.id = `${answerIndex}`;\n\n          return answer;\n        });\n        question.answers = newAnswers;\n        return question;\n      } else {\n        return question;\n      }\n    });\n\n    this.setState({\n      quiz: {\n        ...this.state.quiz,\n        questions: newQuestions\n      }, isSaved: false\n    });\n  };\n\n  handleCheckboxChange = (questionId, event) => {\n    const answerId = event.target.name;\n\n    let checkMinCorrectAnswers = this.checkCorrectAnswers(questionId);\n\n    const newQuestions = this.state.quiz.questions.map(question => {\n      if (question.id === questionId) {\n        question.answers.map(answer => {\n          if (answer.id === answerId) {\n            if (checkMinCorrectAnswers <= 1 && answer.correct === true) {\n              return answer;\n            } else {\n              answer.correct = !answer.correct;\n            }\n            return answer;\n          } else {\n            return answer;\n          }\n        });\n        return question;\n      } else {\n        return question;\n      }\n    });\n\n    this.setState({\n      quiz: {\n        ...this.state.quiz,\n        questions: newQuestions\n      }, isSaved: false\n    });\n  };\n\n  checkCorrectAnswers = questionId => {\n    return this.state.quiz.questions[questionId - 1].answers.filter(\n      answer => answer.correct === true\n    ).length;\n  };\n\n  setRefForLastElement = (el, index, questionsCount) => {\n    if (questionsCount === index) {\n      this.element = el;\n    }\n  };\n\n\n\n  renderQuestions = () => {\n\n    const { questions } = this.state.quiz;\n    const questionsCount = questions.length - 1;\n\n    return questions.map((question, index) => (\n      <div\n        key={question.id}\n        className={\"quizGenInputs\"}\n        ref={el => this.setRefForLastElement(el, index, questionsCount)}\n      >\n        <RemoveQuestionButton\n          onClick={event => this.handleRemoveQuestion(question.id, event)}\n        />\n        <QuestionInput\n          question={question}\n          onChange={this.handleQuestionChange}\n        />\n        <AnswersList\n          question={question}\n          questionId={index}\n          onClickRemoveAnswer={event =>\n            this.handleRemoveAnswer(event, question.id)\n          }\n          onClickCheckboxChange={event =>\n            this.handleCheckboxChange(question.id, event)\n          }\n          onAnswerChange={event => this.handleAnswerChange(event, question.id)}\n        />\n        <AddAnswerButton onClick={() => this.handleAddAnswer(question.id)} />\n      </div>\n      ))\n\n  };\n\n\n\n\n\n  render() {\n\n\n    return (<>\n\n      {this.state.isLoading ? <Dimmer active>\n        <Loader size='massive'>Proszę czekać...</Loader>\n      </Dimmer> :\n        <>\n          <Prompt\n            when={!this.state.isSaved}\n            message='Quiz nie został zapisany. Czy na pewno chcesz wyjść?'\n          />\n          <Container>\n            <div className=\"quizGenWrapper\">\n              <h1 className=\"quizGenHeader\">STWÓRZ QUIZ</h1>\n              <QuizTitleInput quizTitle={this.state.title} onChange={this.handleTitleChange} />\n              {this.renderQuestions()}\n              <div className='saveAndAddButtons'>\n                <AddQuestionButton onClick={this.handleAddQuestion} />\n                <button onClick={this.handleSaveQuiz} className=\"saveQuizButton\">ZAPISZ QUIZ</button>\n                <ScrollUpButton />\n              </div>\n            </div>\n          </Container>\n        </>}\n    </>\n    );\n  }\n}\n\nexport default withRouter(QuizGenWrapper)"]},"metadata":{},"sourceType":"module"}